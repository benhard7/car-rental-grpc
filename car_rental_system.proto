syntax = "proto3";
import "google/protobuf/timestamp.proto";
package carrental;

service CarRentalService {
    rpc AddCar(AddCarRequest) returns (AddCarResponse);
    rpc UpdateCar(UpdateCarRequest) returns (OperationResponse);
    rpc RemoveCar(RemoveCarRequest) returns (OperationResponse);

    rpc ListAvailableCars(AvailableCarsRequest) returns (stream Car);
    rpc SearchCar(SearchCarRequest) returns (SearchCarResponse);
    rpc AddToCart(AddToCartRequest) returns (OperationResponse);
    rpc PlaceReservation(PlaceReservationRequest) returns (ReservationResponse);

    rpc CreateUsers(stream User) returns (OperationResponse);

}

message Car {
    string plate_number = 1;
    string make = 2;
    string model = 3;
    int32 year = 4;
    float daily_price = 5;
    CarStatus status = 6;
}

message AddCarRequest {
    Car car = 1;
}

message AddCarResponse {
    string plate_number = 1;
    string message = 2;
    bool success = 3;
}

message UpdateCarRequest {
    string plate_number = 1;
    optional string make = 2; 
    optional string model = 3;
    optional int32 year = 4;
    optional float daily_price = 5;
    optional int32 mileage = 6;
    optional CarStatus status = 7;
}

message RemoveCarRequest {
    string plate_number = 1; 
}

message AvailableCarsRequest {
    optional string filter_make = 1;   // e.g., "Toyota"
    optional string filter_model = 2;  // e.g., "Camry"
    optional int32 filter_year = 3;    // e.g., 2022
    optional int32 max_results = 4;    // Optional limit on how many cars to return
}

message SearchCarRequest {
    string plate_number = 1; // The unique plate number to search for
}

message SearchCarResponse {
    oneof result {
        Car car = 1;                // If the car is found
        string not_found_message = 2; // If the car is not found
    }
}

message CartItem {
    string plate_number = 1; // The car to be rented
    google.protobuf.Timestamp start_date = 2; // Rental period start
    google.protobuf.Timestamp end_date = 3; // Rental period end
}

message AddToCartRequest {
    string user_id = 1; // Which customer is adding to cart
    CartItem cart_item = 2; // The car and rental dates
}

message PlaceReservationRequest {
    string user_id = 1; // Which customer is placing the reservation
}

message ReservationResponse {
    string reservation_id = 1; // Unique ID for this reservation
    string message = 2;        // Confirmation or error message
    bool success = 3;          // Whether the reservation was successful
    float total_price = 4;     // The total cost of the reservation
    repeated CartItem reserved_items = 5; // List of cars and dates that were reserved
}

enum CarStatus {
    STATUS_UNSPECIFIED = 0;
    STATUS_AVAILABLE = 1;
    STATUS_UNAVAILABLE = 2;
}